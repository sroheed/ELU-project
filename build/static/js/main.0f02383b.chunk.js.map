{"version":3,"sources":["pages/HomePage.tsx","utils/cytoscapeOptions.ts","utils/invertColor.ts","pages/NoPostsPage.tsx","pages/InfoPage.tsx","utils/Links.tsx","components/Menu.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/reddit1.png","assets/reddit2.png"],"names":["HomePage","options","name","fit","padding","startAngle","Math","PI","sweep","undefined","clockwise","equidistant","minNodeSpacing","boundingBox","avoidOverlap","nodeDimensionsIncludeLabels","height","width","spacingFactor","concentric","node","degree","levelWidth","nodes","maxDegree","animate","animationDuration","animationEasing","animateFilter","i","ready","stop","transform","position","padZero","str","len","Array","join","slice","NoPostsPage","cy","useRef","firstLoad","useState","loading","setLoading","subredditName","setSubredditName","postCount","setPostCount","useEffect","current","cytoscape","container","document","getElementById","loadFromStorage","Object","entries","localStorage","forEach","posts","appendNodes","JSON","parse","addNode","colorNode","hex","indexOf","length","Error","r","parseInt","toString","g","b","invertColor","stc","nodeId","author","addEdge","layout","run","id","add","group","data","source","target","color","style","className","CircularProgress","size","Grid","spacing","alignItems","item","xs","Typography","variant","Slider","defaultValue","min","max","valueLabelDisplay","aria-labelledby","onChangeCommitted","e","value","TextField","label","onChange","Button","onClick","fetch","then","res","json","doc","code","setItem","stringify","console","log","message","catch","err","clear","InfoPage","GridList","cols","GridListTile","src","Picture1","alt","GridListTileBar","title","Picture2","links","path","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","Menu","menuOpen","toggleMenu","menuBool","ref","classes","history","useHistory","clickListener","useCallback","contains","setTimeout","addEventListener","removeEventListener","Fragment","AppBar","Toolbar","IconButton","edge","aria-label","pathName","getPathName","window","location","pathname","Drawer","anchor","open","List","map","key","ListItem","button","push","ListItemText","primary","Divider","Router","component","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.0f02383b.chunk.js","sourcesContent":["import React from \"react\";\n//import Button from '@material-ui/core/Button';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>Homepage</div>\n    </>\n    );\n};\n\nexport default HomePage;","export const options = {\n  name: 'concentric',\n\n  fit: true, // whether to fit the viewport to the graph\n  padding: 30, // the padding on fit\n  startAngle: 3 / 2 * Math.PI, // where nodes start in radians\n  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)\n  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow\n  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)\n  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm\n  height: undefined, // height of layout area (overrides container height)\n  width: undefined, // width of layout area (overrides container width)\n  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  concentric: function( node: any ){ // returns numeric value for each node, placing higher nodes in levels towards the centre\n    return node.degree();\n  },\n  levelWidth: function( nodes: any  ){ // the variation of concentric values in each level\n    return nodes.maxDegree() / 4;\n  },\n  animate: false, // whether to transition the node positions\n  animationDuration: 500, // duration of animation in ms if enabled\n  animationEasing: undefined, // easing of animation if enabled\n  animateFilter: function ( node: any , i: any  ){ return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined, // callback on layoutready\n  stop: undefined, // callback on layoutstop\n  transform: function (node: any , position: any  ){ return position; } // transform a given node position. Useful for changing flow direction in discrete layouts\n};","export function invertColor(hex: string) {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.');\n  }\n  // invert color components\n  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\n    g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\n    b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);\n  // pad each with zeros and return\n  return '#' + padZero(r) + padZero(g) + padZero(b);\n}\n\nfunction padZero(str: string, len?: number) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}","import React, {useEffect, useRef, useState} from 'react';\nimport cytoscape from 'cytoscape';\nimport {options} from '../utils/cytoscapeOptions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport stc from 'string-to-color';\nimport {invertColor} from \"../utils/invertColor\";\n\nconst NoPostsPage = () => {\n  const cy: any = useRef();\n  const firstLoad = useRef(true);\n  const [loading, setLoading] = useState(false);\n  const [subredditName, setSubredditName] =  useState(\"\");\n  const [postCount, setPostCount] = useState(10);\n\n  const fetchData = () => {\n    if(!subredditName) return;\n    setLoading(true);\n    fetch(`/api/graph?subreddit=${subredditName}&post_count=${postCount}`, {\n    })\n      .then(res => res.json())\n      .then(doc => {\n        if(doc.code === 200){\n          appendNodes(doc.data);\n          localStorage.setItem(doc.data[0], JSON.stringify(doc.data));\n        }else{\n          console.log(doc.message)\n        }\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(\"ERROR!!!\", err);\n        setLoading(false);\n      })\n  };\n\n\n  useEffect(() => {\n    if(firstLoad.current){\n        cy.current = cytoscape({\n          container: document.getElementById('cy'),\n        });\n      firstLoad.current = false;\n      loadFromStorage();\n    }\n  });\n\n  const loadFromStorage = () => {\n    const postsStorage = Object.entries(localStorage);\n    postsStorage.forEach((posts) => {\n      appendNodes(JSON.parse(posts[1]));\n    });\n  };\n\n  const appendNodes = (posts: any[]) => {\n    const subredditName = posts[0];\n    addNode(subredditName);\n    colorNode(subredditName, invertColor(stc(subredditName)));\n    for(let i=1; i<posts.length; i++){\n      const nodeId = posts[i].author;\n      addNode(nodeId);\n      colorNode(nodeId, stc(subredditName));\n      addEdge(subredditName, nodeId);\n    }\n    cy.current.layout(options).run();\n  };\n\n  const addNode = (id: string) => {\n    cy.current.add([\n      { group: 'nodes', data: { id: id } },\n    ]);\n  };\n\n  const addEdge = (source: string, target: string) => {\n    cy.current.add([\n      { group: 'edges', data: { id: source + \"__\" + target, source: source, target: target } }\n    ]);\n  };\n\n  const colorNode = (nodeId: string, color: string) => {\n    cy.current.getElementById(nodeId).style(\"background-color\", color);\n  };\n\n  return(\n    <>\n      {loading &&\n      <div className={\"loading-spinner\"}>\n          <CircularProgress color=\"secondary\" size={50}/>\n      </div>}\n      <div className={\"scrape-controls__div\"}>\n        <Grid container spacing={2} alignItems={\"baseline\"}>\n          <Grid item xs={3} >\n            <Typography id=\"slider\" variant={\"body2\"}>\n              Post Count\n            </Typography>\n            <Slider\n              defaultValue={10}\n              min={1}\n              max={100}\n              valueLabelDisplay={'on'}\n              aria-labelledby=\"slider\"\n              onChangeCommitted={(e, value) => setPostCount(value as number)}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <div className={\"line-high\"}>\n              <TextField\n                id=\"standard-basic\"\n                label=\"Subreddit Name\"\n                aria-labelledby=\"subredditName\"\n                onChange={(e) => setSubredditName(e.target.value)}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={1}>\n            <div className={\"line-high\"}>\n              <Button variant=\"contained\" color=\"primary\" onClick={fetchData}>\n                Generate\n              </Button>\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => localStorage.clear()}>\n                Delete\n              </Button>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n      <div id=\"cy\" className={'cytoscape__div'} />\n    </>\n  );\n};\n\nexport default NoPostsPage;","import React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Picture1 from \"../assets/reddit1.png\";\nimport Picture2 from \"../assets/reddit2.png\";\nimport Zoom from 'react-medium-image-zoom';\nimport 'react-medium-image-zoom/dist/styles.css';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst InfoPage = () => {\n  return (\n    <>\n      <div className={\"info-images-title\"}>\n        <Typography id=\"slider\" variant={\"h5\"} >\n          Subreddit Connections\n        </Typography>\n      </div>\n      <div className=\"info-images__div\">\n        <GridList cols={2}>\n          <GridListTile>\n            <Zoom>\n              <img src={Picture1} alt={\"Gamedev connections\"} />\n            </Zoom>\n            <GridListTileBar\n              title={\"Gamedev connections\"}\n            />\n          </GridListTile>\n          <GridListTile>\n            <Zoom>\n              <img src={Picture2} alt={\"Devblogs connections\"} />\n            </Zoom>\n            <GridListTileBar\n              title={\"Devblogs connections\"}\n            />\n          </GridListTile>\n        </GridList>\n      </div>\n    </>\n  );\n};\n\nexport default InfoPage;","export const links = [\n  {\n    path: '/',\n    name: 'Home Page',\n  },\n  {\n    path: '/graph-without-posts',\n    name: 'Graph Without Posts',\n  },\n  {\n    path: '/info',\n    name: 'Info',\n  }\n];\n\nexport const getPathName = (pathName: string) => {\n  switch(pathName){\n    case \"/\":\n      return \"Home Page\";\n    case \"/graph-without-posts\":\n      return \"Graph Without Posts\";\n    case \"/info\":\n      return \"Information\";\n  }\n};\n","import React, { useState, useRef, useEffect, useCallback} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { links, getPathName } from '../utils/Links';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\n\nconst Menu = () => {\n  const [menuOpen, toggleMenu] = useState(false);\n  const menuBool = useRef(false);\n  const ref = useRef(null);\n  const ANIMATION_TIME = 255; // seconds\n  const classes = useStyles();\n  const history = useHistory();\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current! as any).contains(e.target)) {\n        if(menuBool.current){\n          toggleMenu(false);\n          console.log(\"clicked\")\n        }\n      }\n    },\n    [ref.current],\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      menuBool.current = menuOpen;\n    }, ANIMATION_TIME);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', clickListener);\n    return () => {\n      document.removeEventListener('click', clickListener);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => toggleMenu(true)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            { getPathName(window.location.pathname) }\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor={'left'} open={menuOpen} variant={'persistent'} ref={ref}>\n        <List>\n          {links.map(item =>\n            <React.Fragment key={item.name}>\n              <ListItem button onClick={() => {\n                toggleMenu(false);\n                history.push(item.path);\n              }}>\n              <ListItemText primary={item.name} />\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          )}\n        </List>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default Menu;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from '../pages/HomePage';\nimport NoPostsPage from \"../pages/NoPostsPage\";\nimport InfoPage from \"../pages/InfoPage\";\nimport Menu from './Menu';\n\nconst Router = () => {\n  return (\n    <>\n      <BrowserRouter>\n        <Route path={\"/\"} component={Menu}/>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage}/>\n          <Route path=\"/graph-without-posts\" exact component={NoPostsPage}/>\n          <Route path=\"/info\" exact component={InfoPage}/>\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n};\n\nexport default Router;\n\n","import React from 'react';\nimport './style/App.scss';\nimport Router from './components/Router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reddit1.dfe2644d.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit2.35007479.png\";"],"sourceRoot":""}