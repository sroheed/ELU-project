{"version":3,"sources":["pages/HomePage.tsx","pages/NoPostsPage.tsx","utils/Links.tsx","components/Menu.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","NoPostsPage","cy","useState","loading","setLoading","useEffect","cytoscape","container","document","getElementById","elements","data","id","layout","name","run","className","CircularProgress","color","size","onClick","add","group","console","log","window","origin","fetch","then","res","json","catch","err","e","screenX","screenY","links","path","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","Menu","menuOpen","toggleMenu","menuBool","useRef","ref","classes","clickListener","useCallback","current","contains","target","setTimeout","addEventListener","removeEventListener","Fragment","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","pathName","getPathName","location","pathname","Drawer","anchor","open","List","map","item","key","ListItem","button","to","ListItemText","primary","Divider","Router","component","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f8f3bdd2.chunk.js","sourcesContent":["import React from \"react\";\n//import Button from '@material-ui/core/Button';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>Homepage</div>\n    </>\n    );\n};\n\nexport default HomePage;","import React, {useEffect, useState} from 'react';\nimport cytoscape from 'cytoscape';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst API = 'http://localhost:5000/api';\n\n\nconst NoPostsPage = () => {\n  let cy: any = null;\n  let [loading, setLoading] = useState(false);\n\n  const fetchData = () => {\n    setLoading(true);\n    console.log(window.origin);\n    fetch(`${API}/graph`, {\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false);\n      })\n  };\n\n\n  useEffect(() => {\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: [{data: {id: 'a'}},{data: {id: 'b'}}]\n    });\n    cy.layout({name: 'breadthfirst'}).run();\n  }, [] );\n\n\n  const addElem = () => {\n    cy.add([\n      { group: 'nodes', data: { id: 'n0' } },\n      { group: 'nodes', data: { id: 'n1' } },\n    ]);\n  };\n\n\n  return(\n    <>\n      {loading &&\n      <div className={\"loading-spinner\"}>\n          <CircularProgress color=\"secondary\" size={50}/>\n      </div>}\n      <button onClick={addElem}>Add elements</button>\n      <button onClick={() => fetchData()}>Log</button>\n      <div id=\"cy\" className={'cytoscape__div'} onClick={(e) => console.log(e.screenX, e.screenY)}/>\n    </>\n  );\n};\n\nexport default NoPostsPage;","export const links = [\n  {\n    path: '/',\n    name: 'Home Page',\n  },\n  {\n    path: '/graph-without-posts',\n    name: 'Graph w/o Posts',\n  }\n];\n\nexport const getPathName = (pathName: string) => {\n  switch(pathName){\n    case \"/\":\n      return \"Home Page\";\n    case \"/graph-without-posts\":\n      return \"Graph w/o Posts\";\n  }\n};\n","import React, { useState, useRef, useEffect, useCallback} from 'react';\nimport { Link } from 'react-router-dom';\nimport { links, getPathName } from '../utils/Links';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\n\nconst Menu = () => {\n  const [menuOpen, toggleMenu] = useState(false);\n  const menuBool = useRef(false);\n  const ref = useRef(null);\n  const ANIMATION_TIME = 255; // seconds\n  const classes = useStyles();\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current! as any).contains(e.target)) {\n        if(menuBool.current){\n          toggleMenu(false);\n        }\n      }\n    },\n    [ref.current],\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      menuBool.current = menuOpen;\n    }, ANIMATION_TIME);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', clickListener);\n    return () => {\n      document.removeEventListener('click', clickListener);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => toggleMenu(true)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            { getPathName(window.location.pathname) }\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor={'left'} open={menuOpen} variant={'persistent'} ref={ref}>\n        <List>\n          {links.map(item =>\n            <React.Fragment key={item.name}>\n              <ListItem button onClick={() => {\n                toggleMenu(false);\n              }}>\n                <Link to={item.path} className={\"link\"}>\n                  <ListItemText primary={item.name} />\n                </Link>\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          )}\n        </List>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default Menu;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from '../pages/HomePage';\nimport NoPostsPage from \"../pages/NoPostsPage\";\nimport Menu from './Menu';\n\nconst Router = () => {\n  return (\n    <>\n      <BrowserRouter>\n        <Route path={\"/\"} component={Menu}/>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage}/>\n          <Route path=\"/graph-without-posts\" exact component={NoPostsPage}/>\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n};\n\nexport default Router;\n\n","import React from 'react';\nimport './style/App.scss';\nimport Router from './components/Router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}