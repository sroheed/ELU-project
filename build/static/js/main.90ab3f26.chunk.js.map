{"version":3,"sources":["pages/HomePage.tsx","utils/cytoscapeOptions.ts","utils/invertColor.ts","components/NodeCard.tsx","components/NodeInformation.tsx","pages/NoPostsPage.tsx","pages/InfoPage.tsx","utils/Links.tsx","components/Menu.tsx","pages/NotFound.tsx","utils/projectData.ts","pages/ProjectGraph.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/reddit1.png","assets/reddit2.png"],"names":["HomePage","coseb","Math","PI","name","ready","stop","quality","nodeDimensionsIncludeLabels","refresh","fit","padding","randomize","nodeRepulsion","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","tile","animate","animationDuration","tilingPaddingVertical","tilingPaddingHorizontal","gravityRangeCompound","gravityCompound","gravityRange","initialEnergyOnIncremental","invertColor","hex","indexOf","slice","length","Error","r","parseInt","toString","g","b","padZero","str","len","Array","join","NodeCard","props","item","index","nodeChecked","handleNodeSelectedCheckbox","removeNodeById","FormControlLabel","control","Checkbox","checked","onChange","color","label","Card","CardHeader","subheader","CardContent","Grid","container","spacing","xs","Typography","variant","node","id","type","degree","Box","display","flexWrap","justifyContent","Button","disableElevation","onClick","NodeInformation","removeNodeOrEdge","addEdge","cy","colorNode","colorEdge","useState","path","setPath","savedColors","setSavedColors","colorPathCheckbox","setColorPathCheckbox","setNodeChecked","selectedEdge","setSelectedEdge","connected","distance","common","setCommon","selectedNode","setSelectedNode","firstNode","setFirstNode","secondNode","setSecondNode","useEffect","on","handleNodeClick","handleEdgeClick","BFSFloyd","resetSelectedEdge","colorPath","resetColors","e","target","currentNode","data","edgesSource","edges","edgesTarget","currentEdge","console","log","nodeId","nodeName","resetNodeValue","elements","floydWarshall","i","previous","colors","push","source","getElementById","style","forEach","nodes","className","map","Fragment","key","cytoscape","use","coseBilkent","NoPostsPage","setCy","cyData","setCyData","firstLoad","useRef","loading","setLoading","subredditName","setSubredditName","postCount","setPostCount","appendData","current","cytoScape","document","loadFromStorage","Object","entries","localStorage","posts","oldArray","JSON","parse","post","addNode","stc","author","layout","run","sizeNodes","add","group","$","width","height","CircularProgress","size","alignItems","Slider","defaultValue","min","max","valueLabelDisplay","aria-labelledby","onChangeCommitted","value","TextField","fetch","then","res","json","doc","code","setItem","stringify","message","catch","err","clear","remove","sourceId","targetId","InfoPage","GridList","cols","GridListTile","src","Picture1","alt","GridListTileBar","title","Picture2","links","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","Menu","menuOpen","toggleMenu","menuBool","ref","classes","history","useHistory","clickListener","useCallback","contains","setTimeout","addEventListener","removeEventListener","AppBar","position","Toolbar","IconButton","edge","aria-label","pathName","getPathName","window","location","pathname","Drawer","anchor","open","List","ListItem","button","ListItemText","primary","Divider","NotFound","subreddits","array","ProjectGraph","loadProjectData","allData","result","output","obj","formatProjectData","generateAllData","Router","component","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.90ab3f26.chunk.js","sourcesContent":["import React from \"react\";\n//import Button from '@material-ui/core/Button';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>Homepage</div>\n    </>\n    );\n};\n\nexport default HomePage;","export const options = {\n  name: 'concentric',\n\n  fit: true, // whether to fit the viewport to the graph\n  padding: 30, // the padding on fit\n  startAngle: 3 / 2 * Math.PI, // where nodes start in radians\n  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)\n  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow\n  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)\n  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm\n  height: undefined, // height of layout area (overrides container height)\n  width: undefined, // width of layout area (overrides container width)\n  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  concentric: function( node: any ){ // returns numeric value for each node, placing higher nodes in levels towards the centre\n    return node.degree();\n  },\n  levelWidth: function( nodes: any  ){ // the variation of concentric values in each level\n    return nodes.maxDegree() / 4;\n  },\n  animate: false, // whether to transition the node positions\n  animationDuration: 500, // duration of animation in ms if enabled\n  animationEasing: undefined, // easing of animation if enabled\n  animateFilter: function ( node: any , i: any  ){ return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n  ready: undefined, // callback on layoutready\n  stop: undefined, // callback on layoutstop\n  transform: function (node: any , position: any  ){ return position; } // transform a given node position. Useful for changing flow direction in discrete layouts\n};\n\nexport const coseb = {\n\n  name: 'cose-bilkent',\n  // Called on `layoutready`\n  ready: function () {\n  },\n  // Called on `layoutstop`\n  stop: function () {\n  },\n  // 'draft', 'default' or 'proof\"\n  // - 'draft' fast cooling rate\n  // - 'default' moderate cooling rate\n  // - \"proof\" slow cooling rate\n  quality: 'default',\n  // Whether to include labels in node dimensions. Useful for avoiding label overlap\n  nodeDimensionsIncludeLabels: false,\n  // number of ticks per frame; higher is faster but more jerky\n  refresh: 30,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 10,\n  // Whether to enable incremental mode\n  randomize: true,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: 45000,\n  // Ideal (intra-graph) edge length\n  idealEdgeLength: 50,\n  // Divisor to compute edge forces\n  edgeElasticity: 0.45,\n  // Nesting factor (multiplier) to compute ideal edge length for inter-graph edges\n  nestingFactor: 0.1,\n  // Gravity force (constant)\n  gravity: 0.25,\n  // Maximum number of iterations to perform\n  numIter: 2500,\n  // Whether to tile disconnected nodes\n  tile: true,\n  // Type of layout animation. The option set is {'during', 'end', false}\n  animate: 'end',\n  // Duration for animate:end\n  animationDuration: 500,\n  // Amount of vertical space to put between degree zero nodes during tiling (can also be a function)\n  tilingPaddingVertical: 10,\n  // Amount of horizontal space to put between degree zero nodes during tiling (can also be a function)\n  tilingPaddingHorizontal: 10,\n  // Gravity range (constant) for compounds\n  gravityRangeCompound: 1.5,\n  // Gravity force (constant) for compounds\n  gravityCompound: 1.0,\n  // Gravity range (constant)\n  gravityRange: 3.8,\n  // Initial cooling factor for incremental layout\n  initialEnergyOnIncremental: 0.5\n};","export function invertColor(hex: string) {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.');\n  }\n  // invert color components\n  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\n    g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\n    b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);\n  // pad each with zeros and return\n  return '#' + padZero(r) + padZero(g) + padZero(b);\n}\n\nfunction padZero(str: string, len?: number) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}","import React from \"react\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport NodeProps from '../interfaces/Node';\n\ninterface Item {\n  name:  string;\n  node: NodeProps;\n}\n\ninterface NodeInfoProps {\n  item: Item;\n  index: number;\n  nodeChecked: string;\n  handleNodeSelectedCheckbox: (nodeId: string) => void\n  removeNodeById: (nodeId: string, itemName: string) => void\n}\n\nconst NodeCard = (props: NodeInfoProps) => {\n  const {item, index, nodeChecked, handleNodeSelectedCheckbox, removeNodeById} = props;\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={nodeChecked === item.name}\n            onChange={() => handleNodeSelectedCheckbox(item.name)}\n            name=\"Multiple Nodes\"\n            color=\"primary\"\n          />\n        }\n        label=\"select\"\n      />\n      <Card>\n        <CardHeader subheader={`Node ${index + 1} Details`}/>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                ID:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                {item.node.id}\n              </Typography>\n            </Grid>\n\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                Type:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                {item.node.type}\n              </Typography>\n            </Grid>\n\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                Edges:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body2\"}>\n                {item.node.degree}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Box display=\"flex\" flexWrap=\"nowrap\" justifyContent={\"left\"}>\n                <Button variant=\"contained\" color=\"secondary\" disableElevation\n                        onClick={() => removeNodeById(item.node.id, item.name)}>\n                  Delete\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default NodeCard;","import React, {useEffect, useState} from 'react';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Card from \"@material-ui/core/Card\";\nimport NodeCard from \"./NodeCard\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\n\ninterface NodeCardProps {\n  cy: any;\n  addEdge: (source: string, target: string) => void;\n  removeNodeOrEdge: (id: string) => void;\n  colorNode: (nodeId: string, color: string) => void;\n  colorEdge: (sourceId: string, targetId: string, color: string) => void\n}\n\nconst NodeInformation = (props: NodeCardProps) => {\n  const {removeNodeOrEdge, addEdge, cy, colorNode, colorEdge} = props;\n  const [path, setPath] = useState<any[]>([]);\n  const [savedColors, setSavedColors] = useState<any[]>([]);\n  const [colorPathCheckbox, setColorPathCheckbox] = useState(false);\n  const [nodeChecked, setNodeChecked] = useState(\"node1\");\n  const [selectedEdge, setSelectedEdge] = useState(\"\");\n  const [common, setCommon] = useState({\n    connected: false,\n    distance: 0\n  });\n  const [selectedNode, setSelectedNode] = useState({\n    id: \"\",\n    type: \"\",\n    degree: 0,\n  });\n  const [firstNode, setFirstNode] = useState({\n    name: \"node1\",\n    node: {\n      id: \"\",\n      type: \"\",\n      degree: 0,\n    }\n  });\n  const [secondNode, setSecondNode] = useState({\n    name: \"node2\",\n    node: {\n      id: \"\",\n      type: \"\",\n      degree: 0,\n    }\n  });\n\n  useEffect(() => {\n    cy.on('click', 'node', handleNodeClick);\n    cy.on('click', 'edge', handleEdgeClick);\n  }, [cy]);\n\n  useEffect(() => {\n    BFSFloyd();\n    resetSelectedEdge();\n  }, [firstNode, secondNode]);\n\n  useEffect(() => {\n    if (colorPathCheckbox) {\n      colorPath();\n    } else {\n      resetColors();\n    }\n    if (common.distance === -1) {\n      resetColors();\n    }\n  }, [colorPathCheckbox, path]);\n\n  useEffect(() => {\n    if (nodeChecked === \"node1\") {\n      setFirstNode({\n        name: \"node1\",\n        node: selectedNode\n      })\n    } else {\n      setSecondNode({\n        name: \"node2\",\n        node: selectedNode\n      })\n    }\n  }, [selectedNode]);\n\n  const resetSelectedEdge = () => {\n    setSelectedEdge(\"\");\n  };\n\n  const handleNodeClick = (e: any) => {\n    const node = e.target;\n    const currentNode = {\n      id: node.id(),\n      type: node.data().type,\n      degree: node.degree(),\n      edgesSource: cy.edges(`[source = \"${node.id()}\"]`),\n      edgesTarget: cy.edges(`[target = \"${node.id()}\"]`),\n    };\n    setSelectedNode(currentNode);\n  };\n\n  const handleEdgeClick = (e: any) => {\n    const edge = e.target; // event target\n    const currentEdge = edge.id();\n    setSelectedEdge(currentEdge);\n    console.log(\"edge click\")\n  };\n\n  const handleNodeSelectedCheckbox = (nodeId: string) => {\n    setNodeChecked(nodeId);\n  };\n\n  const removeNodeById = (id: string, nodeName: string) => {\n    removeNodeOrEdge(id);\n    resetNodeValue(nodeName);\n  };\n\n  const resetNodeValue = (nodeName: string) => {\n    if (nodeName === \"node1\") {\n      setFirstNode({\n        name: \"node1\",\n        node: {\n          id: \"\",\n          type: \"\",\n          degree: 0,\n        }\n      });\n    } else {\n      setSecondNode({\n        name: \"node2\",\n        node: {\n          id: \"\",\n          type: \"\",\n          degree: 0,\n        }\n      });\n    }\n  };\n\n  const BFSFloyd = () => {\n    if (firstNode.node.id && secondNode.node.id) {\n      let distance = 0;\n      const searchFloyd = cy.elements().floydWarshall();\n      const path = searchFloyd.path('#' + firstNode.node.id, '#' + secondNode.node.id);\n      setPath(path);\n      for (let i = 0; i < path.length; i += 2) {\n        distance++;\n      }\n      setCommon({\n        connected: distance > 0,\n        distance: distance - 1\n      });\n    }\n  };\n\n  const colorPath = () => {\n    if (path.length > 1) {\n      resetColors();\n      let previous = \"\";\n      let colors = [];\n      for (let i = 0; i < path.length; i += 2) {\n        colors.push({\n          source: path[i].id(),\n          target: path[i].id(),\n          color: cy.getElementById(path[i].id()).style('background-color')\n        });\n        colorNode(path[i].id(), \"green\");\n        if (previous) {\n          colorEdge(previous, path[i].id(), \"green\");\n          colors.push({\n            source: previous,\n            target: path[i].id(),\n            color: \"gray\"\n          });\n        }\n        previous = path[i].id();\n      }\n      setSavedColors(colors);\n    }\n  };\n\n  const resetColors = () => {\n    savedColors.forEach(item => {\n      if (item.source === item.target) {\n        colorNode(item.source, item.color);\n      }\n      colorEdge(item.source, item.target, item.color);\n    });\n  };\n\n  const nodes = [firstNode, secondNode];\n\n  return (\n    <>\n      <div className={\"details\"}>\n        {selectedEdge !== \"\" && <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disableElevation\n            onClick={() => {\n              removeNodeOrEdge(selectedEdge);\n              resetSelectedEdge();\n              BFSFloyd();\n            }\n            }>\n            Remove Edge\n        </Button>}\n        <br/>\n        {nodes.map((item, i) =>\n          <React.Fragment key={item.name}>\n            <NodeCard\n              item={item}\n              index={i}\n              nodeChecked={nodeChecked}\n              handleNodeSelectedCheckbox={handleNodeSelectedCheckbox}\n              removeNodeById={removeNodeById}\n            />\n          </React.Fragment>\n        )}\n        <br/>\n        {firstNode.node.id !== \"\" && secondNode.node.id !== \"\" && <Card>\n            <CardHeader subheader={`Node 1 > Node 2`}/>\n            <CardContent>\n                <Grid container spacing={3}>\n                    <Grid item xs={6}>\n                        <Typography variant={\"body2\"}>\n                            Connected:\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Typography variant={\"body2\"}>\n                          {common.connected.toString()}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Typography variant={\"body2\"}>\n                            Distance:\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Typography variant={\"body2\"}>\n                          {common.distance}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box display=\"flex\" flexWrap=\"nowrap\" justifyContent={\"space-between\"}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disableElevation\n                                onClick={() => {\n                                  addEdge(firstNode.node.id, secondNode.node.id);\n                                  BFSFloyd();\n                                }}>\n                                Connect\n                            </Button>\n                            <FormControlLabel\n                                control={\n                                  <Checkbox\n                                    checked={colorPathCheckbox}\n                                    onChange={() => setColorPathCheckbox(!colorPathCheckbox)}\n                                    name=\"Multiple Nodes\"\n                                    color=\"primary\"\n                                  />\n                                }\n                                label=\"Color Path\"\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>}\n      </div>\n    </>\n  );\n};\n\n\nexport default NodeInformation;","import React, {useEffect, useRef, useState} from 'react';\nimport cytoscape from 'cytoscape';\nimport {coseb} from \"../utils/cytoscapeOptions\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport stc from 'string-to-color';\nimport {invertColor} from \"../utils/invertColor\";\nimport Box from '@material-ui/core/Box';\nimport NodeInformation from \"../components/NodeInformation\";\n// @ts-ignore\nimport coseBilkent from 'cytoscape-cose-bilkent';\ncytoscape.use( coseBilkent );\n\n\nconst NoPostsPage = () => {\n  const [cy, setCy] = useState<cytoscape.Core>();\n  const [cyData, setCyData] = useState<string[] | object[]>([]);\n  const firstLoad = useRef(true);\n  const [loading, setLoading] = useState(false);\n  const [subredditName, setSubredditName] = useState(\"\");\n  const [postCount, setPostCount] = useState(10);\n\n  const fetchData = () => {\n    if (!subredditName) return;\n    setLoading(true);\n    fetch(`/api/graph?subreddit=${subredditName}&post_count=${postCount}`, {})\n      .then(res => res.json())\n      .then(doc => {\n        if (doc.code === 200) {\n          setCyData(oldArray => [...oldArray, doc.data]);\n          localStorage.setItem(doc.data[0], JSON.stringify(doc.data));\n        } else {\n          console.log(doc.message)\n        }\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(\"ERROR!!!\", err);\n        setLoading(false);\n      })\n  };\n\n  useEffect(() => {\n    cy && appendData(cyData);\n  }, [cyData]);\n\n  useEffect(() => {\n    if (firstLoad.current) {\n      const cytoScape = cytoscape({\n        container: document.getElementById('cy'),\n      });\n      setCy(cytoScape);\n      firstLoad.current = false;\n      loadFromStorage();\n    }\n  }, []);\n\n  const loadFromStorage = () => {\n    const postsStorage = Object.entries(localStorage);\n    postsStorage.forEach((posts) => {\n      setCyData(oldArray => [...oldArray, JSON.parse(posts[1])]);\n    });\n  };\n\n  const appendData = (posts: any[]) => {\n    posts.forEach(post => {\n      const subredditName = post[0];\n      addNode(subredditName, \"subreddit\");\n      colorNode(subredditName, invertColor(stc(subredditName)));\n      for (let i = 1; i < post.length; i++) {\n        const nodeId = post[i].author;\n        addNode(nodeId, \"author\");\n        colorNode(nodeId, stc(subredditName));\n        addEdge(subredditName, nodeId);\n      }\n      cy!.layout(coseb).run();\n      sizeNodes();\n    });\n  };\n\n  const addNode = (id: string, type: string) => {\n    cy!.add([\n      {group: 'nodes', data: {id: id, type: type}},\n    ]);\n  };\n\n  const addEdge = (source: string, target: string) => {\n    cy!.add([\n      {group: 'edges', data: {id: source + \"__\" + target, source: source, target: target}}\n    ]);\n  };\n\n  const removeNodeOrEdge = (id: string) => {\n    cy!.remove(cy!.$(`#${id}`));\n  };\n\n  const colorNode = (nodeId: string, color: string) => {\n    cy!.getElementById(nodeId).style(\"background-color\", color);\n  };\n\n  const colorEdge = (sourceId: string, targetId: string, color: string) => {\n    cy!.getElementById(sourceId + '__' + targetId).style({\n      'width': 3,\n      'line-color': color\n    });\n    cy!.getElementById(targetId + '__' + sourceId).style({\n      'width': 3,\n      'line-color': color\n    });\n  };\n\n  const deleteGraph = () => {\n    localStorage.clear();\n    cy!.elements().remove();\n    setCyData([]);\n  };\n\n  const sizeNodes = () => {\n    cy!.$('node').forEach((node: any) => {\n      if(node.data().type !== \"subreddit\"){\n        node.style({\n          width: node.degree() * 20,\n          height: node.degree() * 20\n        });\n      }else{\n        node.style({\n          width: Math.log(node.degree()) * 15,\n          height: Math.log(node.degree()) * 15\n        });\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading &&\n      <div className={\"loading-spinner\"}>\n          <CircularProgress color=\"secondary\" size={50}/>\n      </div>}\n      <div className={\"scrape-controls__div\"}>\n        <Grid container spacing={2} alignItems={\"baseline\"}>\n          <Grid item xs={3}>\n            <Typography id=\"slider\" variant={\"body2\"}>\n              Post Count\n            </Typography>\n            <Slider\n              defaultValue={10}\n              min={1}\n              max={100}\n              valueLabelDisplay={'on'}\n              aria-labelledby=\"slider\"\n              onChangeCommitted={(e, value) => setPostCount(value as number)}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <div className={\"line-high\"}>\n              <TextField\n                id=\"standard-basic\"\n                label=\"Subreddit Name\"\n                aria-labelledby=\"subredditName\"\n                onChange={(e) => setSubredditName(e.target.value)}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={2}>\n            <div className={\"line-high\"}>\n              <Button variant=\"contained\" color=\"primary\" onClick={fetchData}>\n                Generate Subreddit\n              </Button>\n            </div>\n          </Grid>\n          <Grid item xs={2}>\n            <div className={\"line-high\"}>\n              <Button variant=\"contained\" color=\"secondary\" onClick={deleteGraph}>\n                Delete Graph\n              </Button>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n      <Box display=\"flex\" flexWrap=\"nowrap\">\n        <div id=\"cy\" className={'cytoscape__div'}/>\n        {!firstLoad.current && <NodeInformation\n            cy={cy}\n            removeNodeOrEdge={removeNodeOrEdge}\n            addEdge={addEdge}\n            colorNode={colorNode}\n            colorEdge={colorEdge}\n        />}\n      </Box>\n    </>\n  );\n};\n\nexport default NoPostsPage;","import React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Picture1 from \"../assets/reddit1.png\";\nimport Picture2 from \"../assets/reddit2.png\";\nimport Zoom from 'react-medium-image-zoom';\nimport 'react-medium-image-zoom/dist/styles.css';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst InfoPage = () => {\n  return (\n    <>\n      <div className={\"info-images-title\"}>\n        <Typography id=\"slider\" variant={\"h5\"} >\n          Subreddit Connections\n        </Typography>\n      </div>\n      <div className=\"info-images__div\">\n        <GridList cols={2}>\n          <GridListTile>\n            <Zoom>\n              <img src={Picture1} alt={\"Gamedev connections\"} />\n            </Zoom>\n            <GridListTileBar\n              title={\"Gamedev connections\"}\n            />\n          </GridListTile>\n          <GridListTile>\n            <Zoom>\n              <img src={Picture2} alt={\"Devblogs connections\"} />\n            </Zoom>\n            <GridListTileBar\n              title={\"Devblogs connections\"}\n            />\n          </GridListTile>\n        </GridList>\n      </div>\n    </>\n  );\n};\n\nexport default InfoPage;","export const links = [\n  {\n    path: '/',\n    name: 'Home Page',\n  },\n  {\n    path: '/project-graph',\n    name: 'Project Graph',\n  },\n  {\n    path: '/graph-without-posts',\n    name: 'Graph Without Posts',\n  },\n  {\n    path: '/info',\n    name: 'Info',\n  }\n];\n\nexport const getPathName = (pathName: string) => {\n  switch(pathName){\n    case \"/\":\n      return \"Home Page\";\n    case \"/project-graph\":\n      return \"Project Graph\";\n    case \"/graph-without-posts\":\n      return \"Graph Without Posts\";\n    case \"/info\":\n      return \"Information\";\n  }\n};\n","import React, { useState, useRef, useEffect, useCallback} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { links, getPathName } from '../utils/Links';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\n\nconst Menu = () => {\n  const [menuOpen, toggleMenu] = useState(false);\n  const menuBool = useRef(false);\n  const ref = useRef(null);\n  const ANIMATION_TIME = 255; // seconds\n  const classes = useStyles();\n  const history = useHistory();\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current! as any).contains(e.target)) {\n        if(menuBool.current){\n          toggleMenu(false);\n        }\n      }\n    },\n    [ref.current],\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      menuBool.current = menuOpen;\n    }, ANIMATION_TIME);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', clickListener);\n    return () => {\n      document.removeEventListener('click', clickListener);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => toggleMenu(true)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            { getPathName(window.location.pathname) }\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor={'left'} open={menuOpen} variant={'persistent'} ref={ref}>\n        <List>\n          {links.map(item =>\n            <React.Fragment key={item.name}>\n              <ListItem button onClick={() => {\n                toggleMenu(false);\n                history.push(item.path);\n              }}>\n              <ListItemText primary={item.name} />\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          )}\n        </List>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default Menu;","import React from 'react';\n\nconst NotFound = () => (\n  <>\n    <div>Can no find this page</div>\n  </>\n);\n\nexport default NotFound;","const RPGMaker = ['_himeworks','8-BitNovels','alexe_277','Algebra_Child','AngelStarStudios','Animenerd24','arocta27','Basoosh','beakxlegosi','bebder_game','BenderWaffles','BlackysBro','BoysDontCry38','CactusOhno','CaptainMarcia','CarfDarko','Chaos17','CoopNinjask','damianfox','danielis3','Dayasha','DekitaRPG','Deviate_Dv8','DevOUrBLadEX','DuncanGallagher','DvLyon','Etarxer','EUOS_the_cat','evanvivevanviveiros','Ew_girls','explt','flying_horker','FourtKnight','FromFleshToDust','Good_Good_Games','henrythemoonrabbit','henzosb','Hobotheft','Hudell','Hyptosis','i4Ni_Leon','invadable_harmony','Iron-Unhappy','jihanger','KauzzRes','MakoBatt','MegaEpicMax','meteraider','MiyokoPSO','Nemery_williams','NoboDYNo0b','OffTheGridGaming','ParrotPies','paxtonia','pdonavon1','peelman1978','pixeloid00','Plixel94','PsychicPersona','racistkomaeda','RaijouK','ravenpotter3','Raziel103','Robotpirategary','RoyalZombieStudios','Ruma_K','SigmaSuccour','simpsimpnotasimp','Sir_Legna','Ska_For_Brains','SomaCK2','Soulblade32','ssunlimited','Standardgamer55','subengari','Synrec','Tera_Tyrant_Shadic','thepomegranate','Throwaway-BookerGuy','TPetrichor','TsunSilver','Umropi','USAdude2020','WawaSC','Yasu_Takagi','zankypoo','Zoro_Messatsu'];\nconst devblogs = ['Pulse_games','UnityDude5','BunnyLord2008','DistroGamer','Neat-Games','YuriDDeveloper','mortoray','arthurrt','Cm64_','The_Joker98','bdmg114','someonemandev','AC-Daniel','brainwipe','DevBoundless','GamesInHouse','Huw2k8','Ducktus','HyveStudio','Shezo_Games','CarefullyDetuned','Quantum_Martin','The-F4LK3N','forgottenmachine','AccShockStudios','Krevzz','madbookstudios','s0lly','udvaritibor95','GameDevRepublic','nycram99','Schmidt-','timkrief','ACallForAdventure','Dev-Mug','ZeroTris','SnaiperoG','nickavv','enigma2728','morgondag','nexxM'];\nconst gamedesign = ['deshara128','misomiso82','Crul_','SaaSGrowth','SquallySubset43','TurkusGyrational','nawab1234321','SuperRisto','chrismuriel','Neburay','el_drosophilosopher','friendofgorillas','ferret_king10','Sdueq','MrRempton','tyrannosauru','voxel_crutons','AbbreviationsHappy45','ned_poreyra','Intelligent-Big-7482','haloguy397','sockmonst3r','ia97lies','SigglesMagnus','ItsJm8','VentKazemaru','dMTable','MyCarIsFake'];\nconst gamedev = ['Dinari3D','thetalker101','ShrineWarsDev','SquallySubset43','Tyler_Potts_','Sexual_Lettuce','Raknarg','cheerfulboy','genarTheDev','SingularSchemes','oldguywithakeyboard','ChrisTharpArt','Papkin24','captin_Zenux','SquamousForest','Joyjan1234567','sScriptiee','MED_MAD','jayanam','ChristmasChan','CeleritasGames','Flashdx','omgsoftcats','sonicworkflow','Illumii','RogueWorlds','nawab1234321','Mjeno','MrCookiePot','ThatWasAJokeLads','FadrikAlexander','LegionMm','alaslipknot','UnityDude5','RichardEast','AnonTopat','DOOMRebooted','Dependent_Bird','SayAllenthing','ash4640','EternalStud3nt','Squarehusky','sjolledawg','Alstrainfinite','cedrick9998','J_Winn','GameDevTazdik','jettelly_games','E3Fell','proboardslolv5','Code_Monster','Dyuozor','ShyGuyhahaha132','Vitaro99','NoobDev7','natemi10','Khanx078','lukaspiderman1','SunnyValleyStudio','HarleeDavis246','woahtherefriend','TransportationNo8275','qugartgames','We_Visionaries','Glissile','itsPeetah','Biim_Games','0xcfe','s0lly','adarkenergy','besemop','tristanstoutenburg','LtRandolphGames','Hoorayaru','UnstableMainframe','AHAKuo','_neenaw','MysteriousPlantain','luxysaugat','Slight_Crazy','PulseQ8','The_Scholastics','epiphanyatnight','PoloxDisc098','IAmTrying-Ok','BigRookGames','blu_duc','jodieeelu','sishaar','0ranGeAneApplE_1442','AgemoIramF2P-MC17','PirateJC','Probably_Sam','Sersch','megarunner12'];\nconst gamedevscreens = ['bladesofheroes','safeena_games','MrPr1993','Nukefist','HustlaMasi','Hannah_the_Game','ravendawngame','nunisi','timkrief','AbyssLabDev','IAmASmallLad','JezzaPrime','infrared34','abezuska','NesiAwesomeness','GideonGriebenow','hipinds','akheelos','ACallForAdventure','trieckaga','Herogrinder','Bigbearmeal','EspirartGames','SweetySetsu','Janivexa','TheSeahorseHS','All_in_Games_Crew','SimplyGuy','DoerAndTheThinker','NeutralPheede','The_Joker98','Rythmical7','BigSquirmy','SweepingAvalanche','LifeforNazgul','ScoutsHonorGame','TinyMontana','diegolrs','publicidadeba','chinykian','eremite_games','nananame','akomomssim','IamAmeta','no5ifty6ix','CraftshopArts','bryqu','IndependentCrab1','AnastasyaZelenova','nightowldigital','TheLostWorld-Dev','Chikanut','FracturedVeil','Priory_Dev','mori92','LushkinR','taucetistudios','Edalbung','julcreutz','AspiringUnicornGames','Gamedust_Studio','seb_the_cat','Dave_SigurStudio','biblik','dronecloud','growbotgame','thefrenchdev','_Abnormalia','tonywulum','Cm64_','RankWarmaster','joshjourneygame','Over9000Zombies','M_Nenad','MalboMX','pozzisoft','mvmvgames','DrDezmund','GamesInHouse','jettelly_games','rpssoftware','GuildOfDragons','phoenixsteelgames','anna2FOR2','Terrajedi77','Tony_Vilgotsky','MusicBeatReddit','OpenWorldInteractive','TheWoolyArtist','-sl0b','zizhen96','PiesliceProductions','arthurrt','bengel2004','sweetdesignman','RetroReactor','blue_bubble_bee','xenoscapeGame','HyveStudio','TheShatteredLight','FatCatEntertainment','CrowbarSka','Beosar','Cockon','protokollstudio','TheSGP009','JarlSagan1278','Kalicola','centaurianmudpig','udvaritibor95','TinTinV','RootlessStudio','enigma2728','SergeyMakesAGame','Krevzz','alienantworld1hype','Rasie1','unleash_the_giraffe','jorgedesouzajr','SimpleLogistics','Kondor0','ComradeTaty','WaskilyWabit','SAVVU_Games','ArmedChalko','Dastashka','PSUDewwa','Ratstail91','zinkdeveloper','MountnRickRose','BrazenJesterStudios','DarkRingStudio','hook_games','Tommy1244','Spirit9541','supple_hands','VikongGames','SlickSpec','RiseoftheJaguar','ShieldbearerStudios','cnblack','Vatsal1991','Z-NexusStudios','Arcadepth','jonah_srg','InfiniteLet4','HastilyAssembled','lexferreiragames'];\n\nconst subreddits = [\n  {name: \"RPGMaker\", array: RPGMaker},\n  {name: \"devblogs\", array: devblogs},\n  {name: \"gamedesign\", array: gamedesign},\n  {name: \"gamedev\", array: gamedev},\n  {name: \"gamedevscreens\", array: gamedevscreens}\n  ];\n\nconst formatProjectData = (subredditName: string, array: string[]): string[] | object[] => {\n  let output: any[] = [subredditName];\n  array.forEach(item => {\n    const obj = {\n      author: item\n    };\n    output.push(obj);\n  });\n  return output;\n};\n\nexport const generateAllData = () => {\n  let allData: any[] = [];\n  subreddits.forEach(item => {\n    const result = formatProjectData(item.name, item.array);\n    allData.push(result);\n  });\n  return allData;\n};","import React, {useEffect, useRef, useState} from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport NodeInformation from \"../components/NodeInformation\";\nimport cytoscape from \"cytoscape\";\n// @ts-ignore\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport {invertColor} from \"../utils/invertColor\";\nimport stc from \"string-to-color\";\nimport {coseb} from \"../utils/cytoscapeOptions\";\nimport {generateAllData} from \"../utils/projectData\";\n\ncytoscape.use( coseBilkent );\n\n\nconst ProjectGraph = () => {\n  const [cy, setCy] = useState<cytoscape.Core>();\n  const [cyData, setCyData] = useState<string[] | object[]>([]);\n  const firstLoad = useRef(true);\n\n  useEffect(() => {\n    cy && appendData(cyData);\n  }, [cyData]);\n\n  useEffect(() => {\n    if (firstLoad.current) {\n      const cytoScape = cytoscape({\n        container: document.getElementById('cy'),\n      });\n      setCy(cytoScape);\n      firstLoad.current = false;\n      loadProjectData();\n    }\n  }, []);\n\n  const loadProjectData = () => {\n    const data = generateAllData();\n    data.forEach((posts) => {\n      setCyData(oldArray => [...oldArray, posts]);\n    });\n  };\n\n  const appendData = (posts: any[]) => {\n    posts.forEach(post => {\n      const subredditName = post[0];\n      addNode(subredditName, \"subreddit\");\n      colorNode(subredditName, invertColor(stc(subredditName)));\n      for (let i = 1; i < post.length; i++) {\n        const nodeId = post[i].author;\n        addNode(nodeId, \"author\");\n        colorNode(nodeId, stc(subredditName));\n        addEdge(subredditName, nodeId);\n      }\n      cy!.layout(coseb).run();\n      sizeNodes();\n    });\n  };\n\n  const addNode = (id: string, type: string) => {\n    cy!.add([\n      {group: 'nodes', data: {id: id, type: type}},\n    ]);\n  };\n\n  const addEdge = (source: string, target: string) => {\n    cy!.add([\n      {group: 'edges', data: {id: source + \"__\" + target, source: source, target: target}}\n    ]);\n  };\n\n  const removeNodeOrEdge = (id: string) => {\n    cy!.remove(cy!.$(`#${id}`));\n  };\n\n  const colorNode = (nodeId: string, color: string) => {\n    cy!.getElementById(nodeId).style(\"background-color\", color);\n  };\n\n  const colorEdge = (sourceId: string, targetId: string, color: string) => {\n    cy!.getElementById(sourceId + '__' + targetId).style({\n      'width': 3,\n      'line-color': color\n    });\n    cy!.getElementById(targetId + '__' + sourceId).style({\n      'width': 3,\n      'line-color': color\n    });\n  };\n\n  const sizeNodes = () => {\n    console.log(\"slss\");\n    cy!.$('node').forEach((node: any) => {\n      if(node.data().type !== \"subreddit\"){\n        node.style({\n          width: node.degree() * 20,\n          height: node.degree() * 20\n        });\n      }else{\n        node.style({\n          width: node.degree() / 2,\n          height: node.degree() / 2\n        });\n      }\n    });\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" flexWrap=\"nowrap\">\n        <div id=\"cy\" className={'cytoscape__div'}/>\n        {!firstLoad.current && <NodeInformation\n            cy={cy}\n            removeNodeOrEdge={removeNodeOrEdge}\n            addEdge={addEdge}\n            colorNode={colorNode}\n            colorEdge={colorEdge}\n        />}\n      </Box>\n    </>\n  );\n};\n\nexport default ProjectGraph;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from '../pages/HomePage';\nimport NoPostsPage from \"../pages/NoPostsPage\";\nimport InfoPage from \"../pages/InfoPage\";\nimport Menu from './Menu';\nimport NotFound from \"../pages/NotFound\";\nimport ProjectGraph from \"../pages/ProjectGraph\";\n\nconst Router = () => {\n  return (\n    <>\n      <BrowserRouter>\n        <Route path={\"/\"} component={Menu}/>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage}/>\n          <Route path=\"/project-graph\" exact component={ProjectGraph}/>\n          <Route path=\"/graph-without-posts\" exact component={NoPostsPage}/>\n          <Route path=\"/info\" exact component={InfoPage}/>\n          <Route component={NotFound}/>\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n};\n\nexport default Router;\n\n","import React from 'react';\nimport './style/App.scss';\nimport Router from './components/Router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reddit1.dfe2644d.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit2.35007479.png\";"],"sourceRoot":""}